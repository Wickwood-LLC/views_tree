<?php

/**
 * @file
 * Views Tree module.
 */

use Drupal\views\Plugin\views\field\FieldPluginBase;

/**
 * Implements hook_theme().
 */
function views_tree_theme($existing, $type, $theme, $path) {
  // @todo use templates.
  return array(
    'views_tree' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
      ),
      'function' => 'theme_views_tree',
    ),
    'views_tree_inner' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
        'result' => array(),
        'parent' => NULL,
      ),
      'function' => 'theme_views_tree_inner',
    ),
  );
}

function template_preprocess_views_tree(&$vars) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $vars['view'];
  $options = $view->getStyle()->options;
  $vars['#attached']['library'][] = 'views_tree/views_tree';

  // Add JS and CSS for collapsible tree, if configured.
  if (!empty($options['collapsible_tree'])) {
    $vars['#attached']['drupalSettings'] = [
      'views_tree_settings' => [[
        $view->id(),
        $options['collapsible_tree'],
      ],
    ]];
  }
}


/**
 * Theme function for the tree style plugin.
 *
 * We need to do some weirdness that makes more sense as a theme function than
 * as a template.
 *
 * @ingroup themeable
 * @link http://drupal.org/node/355919
 */
function theme_views_tree($variables) {
  $tree_values = new \Drupal\views_tree\ViewsResultTreeValues();

  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $options = $view->getStyle()->options;
  $rows = $variables['rows'];
  $title = $variables['title'];

  $result = $view->result;

  $tree_values->setTreeValues($view, $result);

  // Recursively render each item.
  $build = [
    '#theme' => 'views_tree_inner',
    '#view' => $view,
    '#options' => $options,
    '#rows' => $rows,
    '#title' => $title,
    '#result' => $result,
    '#parent' => 0,
  ];
  $tree = \Drupal::service('renderer')->render($build);

  return $title . $tree;
}

/**
 * Inner recursive theme function for views tree theming.
 *
 * @ingroup themeable
 * @param $view
 * @param $options
 * @param $row
 * @param $title
 * @param $result
 *   An array representing the raw data returned from the query.
 * @param $parent
 *   The id of the parent entry in the call stack.
 */
function theme_views_tree_inner($variables) {
  $view = $variables['view'];
  $options = $variables['options'];
  $rows = $variables['rows'];
  $title = $variables['title'];
  $result = $variables['result'];
  $parent = $variables['parent'];

  $items = array();
  foreach ($result as $i => $record) {
    if ($record->views_tree_parent == $parent) {
      $variables['parent'] = $record->views_tree_main;
      $rows[$i]['#suffix'] = call_user_func(__FUNCTION__, $variables);
      $items[] = $rows[$i];
    }
  }
  $build = [
    '#theme' => 'item_list',
    '#type' => $options['type'],
    '#items' => $items,
  ];
  return count($items) ? \Drupal::service('renderer')->render($build) : '';
}
