<?php

/**
 * @file
 * Views tree module.
 */

/**
 * Implements hook_theme().
 */
function views_tree_theme($existing, $type, $theme, $path) {
  // @todo use templates.
  return [
    'views_tree' => [
      'variables' => [
        'view' => NULL,
        'options' => [],
        'rows' => [],
        'title' => NULL,
      ],
    ],
  ];
}

function template_preprocess_views_tree(&$vars) {
  $rows = $vars['rows'];
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $vars['view'];
  $options = $view->getStyle()->options;
  $vars['#attached']['library'][] = 'views_tree/views_tree';

  // Add JS and CSS for collapsible tree, if configured.
  if (!empty($options['collapsible_tree'])) {
    $vars['#attached']['drupalSettings'] = [
      'views_tree_settings' => [[
        $view->id(),
        $options['collapsible_tree'],
      ],
    ]];
  }

  /** @var \Drupal\views_tree\ViewsResultTreeValues $tree_values */
  $tree_values = \Drupal::service('views_tree.views_tree_values');
  /** @var \Drupal\views_tree\TreeHelper $tree */
  $tree = \Drupal::service('views_tree.tree');
  $result = $view->result;

  $tree_values->setTreeValues($view, $result);
  $result_tree = $tree->getTreeFromResult($result);

  $tree->getItemsTreeFromResultTree($result_tree, $rows);

//  $items = [];
//  foreach ($result as $i => $record) {
//    if ($record->views_tree_parent == $parent) {
//      $variables['parent'] = $record->views_tree_main;
//      $rows[$i]['#suffix'] = call_user_func(__FUNCTION__, $variables);
//      $items[] = $rows[$i];
//    }
//  }

  $vars['#options'] = $options;
  $vars['#items'] = $items;
}

